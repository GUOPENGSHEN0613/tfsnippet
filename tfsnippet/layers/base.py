from tfsnippet.utils import (DocInherit, VarScopeObject,
                             add_name_and_scope_arg_doc)

__all__ = ['BaseLayer']


# We choose to derive `BaseLayer` from `VarScopeObject`, even if it does not
# need such a VarScopeObject.  This is because we can enjoying having a
# uniquified layer name for each Layer object, and add its name to the name
# scopes generated by its method, so as to make the debugging messages of
# TensorFlow much more clear.

@DocInherit
class BaseLayer(VarScopeObject):
    """
    Base class for all neural network layers.
    """

    @add_name_and_scope_arg_doc
    def __init__(self, name=None, scope=None):
        """Construct a new :class:`BaseLayer`."""
        super(BaseLayer, self).__init__(name=name, scope=scope)

    def apply(self, input):
        """
        Apply the layer on `input`, to produce output.

        Derived classes should override this to actually build the output.

        Args:
            input: The input tensor, or a list of input tensors.

        Returns:
            The output tensor, or a list of output tensors.
        """
        raise NotImplementedError()

    def __call__(self, input):
        return self.apply(input)
